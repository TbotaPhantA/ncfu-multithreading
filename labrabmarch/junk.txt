#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

// Структура для хранения строки и ее длины
typedef struct {
    char *str;
    size_t len;
} string_t;

// Функция потока, сортирующая строки
void *sort_thread(void *arg) {
    string_t *s = (string_t *)arg;
    // Задержка, пропорциональная длине строки
    usleep(s->len * 1000);
    // Вывод строки
    printf("%s\n", s->str);
    // Освобождение памяти
    free(s->str);
    free(s);
    return NULL;
}

int main() {
    // Массив строк
    string_t *strings = malloc(100 * sizeof(string_t));
    int n = 0;

    // Чтение строк
    while (scanf("%s", strings[n].str) != EOF) {
        strings[n].len = strlen(strings[n].str);
        n++;
    }

    // Создание потоков для каждой строки
    pthread_t threads[n];
    for (int i = 0; i < n; i++) {
        pthread_create(&threads[i], NULL, sort_thread, &strings[i]);
    }

    // Ожидание завершения всех потоков
    for (int i = 0; i < n; i++) {
        pthread_join(threads[i], NULL);
    }

    return 0;
}